# 一、缓存的意义

- 避免服务器通对高频率的同样请求，反复的进行计算并去数据库获取相应的数据，这样容易导致服务器过载，并浪费服务器资源。Django 的缓存很好的节解决了这一问题

# 二、缓存分类

## 2.1 MemCache缓存实现流程

- 缓存将一个某个 views 视图函数的返回值保存至内存或者 memcached 中，若在时间约定范围内该用户又对此视图发起了请求，则不再去执行 views 中的操作，而是直接从内存或者 Redis 中获取之前已经缓存的数据，并将其返回给浏览器，这也是动态网站使用缓存的常用流程
- Memcached 不是 Django 自带的模块，而是需要你自己安装、配置和启动服务；Memcached 安装后，用 Python 操作 Memcached 的依赖库，最常用的是 python-memcached 和 pylibmc

## 2.2 Redis

- 先检查客户端的请求数据是否在 Redis 中，如有，直接把请求数据返回，不再对数据库进行任何操作；如果请求的数据不在 Redis 中，就去查数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到 Redis 中；每次更新数据库的同时更新 Redis 中的数据，保证与数据库的一致性

# 三、Django中的缓存机制

- Django 中提供多种缓存机制，如需使用需要在 settings.py 文件中进行配置，Django 提供了六种常用的缓存机制，如下所示：

  - 开发调试缓存
  - 本地内存缓存
  - 数据库缓存
  - 文件缓存
  - Memcache缓存（使用python-memcached模块）
  - Memcache缓存（使用pylibmc模块）

- 数据库缓存配置如下

  - 使用数据库进行缓存其实是非常鸡肋的，因为我们之所以使用缓存就是为了减少数据库的查询，但是企业环境下的数据库如果非常高速、高效，那么你可以使用这种机制

  - 创建缓存数据表 `python manage.py createcachetable my_cache_table`

    ```python
    #数据缓存机制
    CACHES = {
        'default': {
            'BACKEND':'django.core.cache.backends.db.DatabaseCache', #数据库引擎
            'TIMEOUT':300, #缓存超时时间（默认300秒，None表示永不过期，0表示立即过期）
            'LOCATION': 'my_cache_table',
            'MAX_ENTRIES': 3,  # 当前最大缓存数
            'CULL_FREQUENCY': 3,  # 缓存到达最大个数之后，剔除缓存个数的比例，即 1/CULL_FREQUENCY（默认3）
        }
    }
    ```

- 文件系统缓存

  ```python
  CACHES = {
      'default': {
          'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
          'LOCATION': 'c:/foo/bar', #若是 Linux 路径写为 /home/cnet/cachetest
      }
  }
  ```

  - 文件缓存机制，也是 Django 为我们提供的一种执行缓存的方法，不过这种方法相较数据库而言更慢，不过有总比没有强，在你无路可走的时候，为了实现达到缓存的目的也可以使用

- 基于本地内存的缓存机制，内存的交互速度快，使用这种机制作为缓存是比较合适的

  ```python
  # 此缓存将内容保存至内存的变量中
  CACHES = {
      'default':{
      'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
      'LOCATION': 'unique-snowflake',#给缓存放置的内存区设置一个名字
      }
  }
  ```

# 四、缓存的使用方式

## 4.1 使用方式介绍

- 在 Django 中我们可以使用如下方式直接对缓存进行应用，前两者是通过装饰器实现的，最后一个是通过模板标签实现的：
  - 在视图View中使用
  - 在路由URL中使用
  - 在模板中使用

## 4.2 分类讲解

- 在视图中使用

  - 在 django.views.decorators.cache django自定义了一个自动缓存视图响应结果的装饰器 cache_page，这个装饰器接受一个参数：timeout 以秒为单位。在下面的示例中，my_view() 视图的结果将被缓存 30 分钟，也可以写为 60*30

  ```python
  from django.views.decorators.cache import cache_page
  @cache_page(60*30)#以秒为单位
  def my_view(request): 
      ...
  ```

- 在路由中使用

  ```python
  from django.views.decorators.cache import cache_page
  
  urlpatterns = [
      path('foo/', cache_page(60)(my_view)),
  ]
  ```

- 在模总使用，也叫做模板碎片缓存

  ```python
  # 我们要在模版的顶部位置添加 {% load cache %}，同样它也需要 {% endcache %} 结尾。模板标签 {% cache %} 将在设定的时间内，缓存标签块中包含的内容。它最少需要两个参数：依次为缓存时间（以秒为单位）以及要被缓存的片段起的名称（bar）
  {% load cache %}
  {% cache 500 bar request.user.username %} #时间500s
      .. bar for logged in user ..
  {% endcache %}
  ```

# 五、实例使用

- 在index App视图函数中添加下面的代码，并且配置好路径

  ```python
  @cache_page(60)
  def test_cache(request):
      t1 = time.time() #得到当前时间
      time.sleep(3) #阻塞三秒
      html = 't1 is %s'%(t1)
      return HttpResponse(html)
  ```

  - 进行访问之时，发现第一次请求时会阻塞三秒，然后在缓存期间请求页面则不需要阻塞，直到缓存过期重新阻塞![image-20220321102019949](https://raw.githubusercontent.com/yaocunhao/picture/main/image-20220321102019949.png)

- 在path中使用cache_page()

  ```python
  path('cache/',cache_page(30)(views.test_cache)),
  ```

- 在模板中碎片化缓存 （**实例不太对，后续进行完善**）

  - 视图函数

    ```python
    def temp_cache(request):
        if request.method == 'GET':
            return render(request, 'test_cache.html')
        elif request.method == 'POST':
            t1 = time.time()  # 得到当前时间戳
            time.sleep(3)  # 阻塞三秒
            return render(request, 'test_cache.html', locals()) #locals得到t1时间变量字典
    
    ```

  - 模板 

    ```html
    <form action="/index/test_time/" method="post">
        {% csrf_token %}
    {% load cache %}
    {% cache 30 test %}  #30s,缓存test
    <p>我是缓存的 {{ t1 }}</p>
    {% endcache %}
    <h4>
        我是没有缓存的{{ t1 }}
    </h4>
    <input type="submit" value="提交">
    </form>
    ```

    